$date
	Sat Nov 12 16:55:24 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module top_tb $end
$var reg 1 ! clk $end
$scope module top $end
$var wire 1 ! clk $end
$var wire 1 " zero_xm $end
$var wire 1 # zero $end
$var wire 5 $ write_reg_xm [4:0] $end
$var wire 5 % write_reg_mb [4:0] $end
$var wire 5 & write_reg [4:0] $end
$var wire 32 ' write_data [31:0] $end
$var wire 32 ( simm [31:0] $end
$var wire 32 ) rt_value_xm [31:0] $end
$var wire 32 * rt_value_ix [31:0] $end
$var wire 32 + rt_value [31:0] $end
$var wire 5 , rt_ix [4:0] $end
$var wire 32 - rs_value_ix [31:0] $end
$var wire 32 . rs_value [31:0] $end
$var wire 5 / rs_ix [4:0] $end
$var wire 32 0 result_xm [31:0] $end
$var wire 32 1 result_mb [31:0] $end
$var wire 1 2 reg_write_xm $end
$var wire 1 3 reg_write_mb $end
$var wire 1 4 reg_write_ix $end
$var wire 1 5 reg_write $end
$var wire 1 6 reg_dst_ix $end
$var wire 1 7 reg_dst $end
$var wire 32 8 read_data_mb [31:0] $end
$var wire 32 9 read_data [31:0] $end
$var wire 5 : rd_ix [4:0] $end
$var wire 1 ; pcwrite $end
$var wire 1 < pc_src $end
$var wire 32 = pc_out [31:0] $end
$var wire 32 > pc_next_ix [31:0] $end
$var wire 32 ? pc_next_fd [31:0] $end
$var wire 32 @ pc_next [31:0] $end
$var wire 32 A pc_in [31:0] $end
$var wire 4 B op [3:0] $end
$var wire 32 C mux_br_out [31:0] $end
$var wire 1 D mem_write_xm $end
$var wire 1 E mem_write_ix $end
$var wire 1 F mem_write $end
$var wire 1 G mem_to_reg_xm $end
$var wire 1 H mem_to_reg_mb $end
$var wire 1 I mem_to_reg_ix $end
$var wire 1 J mem_to_reg $end
$var wire 1 K mem_read_xm $end
$var wire 1 L mem_read_ix $end
$var wire 1 M mem_read $end
$var wire 1 N jump_xm $end
$var wire 1 O jump_ix $end
$var wire 32 P jump_addr32 [31:0] $end
$var wire 28 Q jump_addr [27:0] $end
$var wire 1 R jump $end
$var wire 32 S instruction_fd [31:0] $end
$var wire 32 T instruction [31:0] $end
$var wire 32 U imm_ix [31:0] $end
$var wire 32 V imm [31:0] $end
$var wire 1 W ifidWrite $end
$var wire 1 X hazardbit $end
$var wire 1 Y hazardRegWrite $end
$var wire 1 Z hazardRegDst $end
$var wire 1 [ hazardMemtoReg $end
$var wire 1 \ hazardMemWrite $end
$var wire 1 ] hazardMemRead $end
$var wire 1 ^ hazardJump $end
$var wire 1 _ hazardBranch $end
$var wire 1 ` hazardAluSrc $end
$var wire 2 a hazardAluOp [1:0] $end
$var wire 1 b controlmuxbit $end
$var wire 1 c branch_xm $end
$var wire 1 d branch_ix $end
$var wire 32 e branch_addr_xm [31:0] $end
$var wire 32 f branch_addr [31:0] $end
$var wire 1 g branch $end
$var wire 1 h alu_src_ix $end
$var wire 1 i alu_src $end
$var wire 32 j alu_result [31:0] $end
$var wire 2 k alu_op_ix [1:0] $end
$var wire 2 l alu_op [1:0] $end
$var wire 32 m alu_b [31:0] $end
$scope module HD $end
$var wire 5 n IF_ID_rs [4:0] $end
$var wire 5 o IF_ID_rt [4:0] $end
$var wire 10 p controlbits [9:0] $end
$var wire 1 3 MEM_WB_regwrite $end
$var wire 5 q MEM_WB_rd [4:0] $end
$var wire 5 r ID_EX_rt [4:0] $end
$var wire 1 4 ID_EX_regwrite $end
$var wire 1 6 ID_EX_regdst $end
$var wire 5 s ID_EX_rd [4:0] $end
$var wire 1 L ID_EX_MemRead $end
$var wire 1 2 EX_MEM_regwrite $end
$var wire 5 t EX_MEM_rd [4:0] $end
$var reg 1 b ControlMuxBit $end
$var reg 1 X HazardBit $end
$var reg 1 W IF_ID_write $end
$var reg 1 ; PCWrite $end
$upscope $end
$scope module alu $end
$var wire 1 # zero $end
$var wire 4 u op [3:0] $end
$var wire 32 v b [31:0] $end
$var wire 32 w a [31:0] $end
$var reg 32 x c [31:0] $end
$upscope $end
$scope module alu_control $end
$var wire 6 y funct [5:0] $end
$var wire 2 z alu_op [1:0] $end
$var reg 4 { alu_control [3:0] $end
$upscope $end
$scope module and_branch $end
$var wire 1 " b $end
$var wire 1 c a $end
$var reg 1 < result $end
$upscope $end
$scope module branch_adder $end
$var wire 32 | out [31:0] $end
$var wire 32 } in2 [31:0] $end
$var wire 32 ~ in1 [31:0] $end
$upscope $end
$scope module control $end
$var wire 6 !" opcode [5:0] $end
$var reg 2 "" alu_op [1:0] $end
$var reg 1 i alu_src $end
$var reg 1 g branch $end
$var reg 1 R jump $end
$var reg 1 M mem_read $end
$var reg 1 J mem_to_reg $end
$var reg 1 F mem_write $end
$var reg 1 7 reg_dst $end
$var reg 1 5 reg_write $end
$upscope $end
$scope module dmem $end
$var wire 1 ! clk $end
$var wire 32 #" write_data [31:0] $end
$var wire 32 $" read_data [31:0] $end
$var wire 1 D mem_write $end
$var wire 1 K mem_read $end
$var wire 32 %" address [31:0] $end
$upscope $end
$scope module hazard_aluop $end
$var wire 1 b flag $end
$var wire 2 &" in1 [1:0] $end
$var wire 2 '" in2 [1:0] $end
$var wire 2 (" out [1:0] $end
$upscope $end
$scope module hazard_alusrc $end
$var wire 1 b flag $end
$var wire 1 i in1 $end
$var wire 1 )" in2 $end
$var wire 1 ` out $end
$upscope $end
$scope module hazard_branch $end
$var wire 1 b flag $end
$var wire 1 g in1 $end
$var wire 1 *" in2 $end
$var wire 1 _ out $end
$upscope $end
$scope module hazard_jump $end
$var wire 1 b flag $end
$var wire 1 R in1 $end
$var wire 1 +" in2 $end
$var wire 1 ^ out $end
$upscope $end
$scope module hazard_mem_read $end
$var wire 1 b flag $end
$var wire 1 M in1 $end
$var wire 1 ," in2 $end
$var wire 1 ] out $end
$upscope $end
$scope module hazard_memtoreg $end
$var wire 1 b flag $end
$var wire 1 J in1 $end
$var wire 1 -" in2 $end
$var wire 1 [ out $end
$upscope $end
$scope module hazard_memwrite $end
$var wire 1 b flag $end
$var wire 1 F in1 $end
$var wire 1 ." in2 $end
$var wire 1 \ out $end
$upscope $end
$scope module hazard_regdst $end
$var wire 1 b flag $end
$var wire 1 7 in1 $end
$var wire 1 /" in2 $end
$var wire 1 Z out $end
$upscope $end
$scope module hazard_regwrite $end
$var wire 1 b flag $end
$var wire 1 5 in1 $end
$var wire 1 0" in2 $end
$var wire 1 Y out $end
$upscope $end
$scope module imem $end
$var wire 32 1" read_data [31:0] $end
$var wire 32 2" address [31:0] $end
$var integer 32 3" i [31:0] $end
$upscope $end
$scope module mux_alu $end
$var wire 32 4" out [31:0] $end
$var wire 32 5" in2 [31:0] $end
$var wire 32 6" in1 [31:0] $end
$var wire 1 h flag $end
$upscope $end
$scope module mux_branch $end
$var wire 1 < flag $end
$var wire 32 7" out [31:0] $end
$var wire 32 8" in2 [31:0] $end
$var wire 32 9" in1 [31:0] $end
$upscope $end
$scope module mux_jump $end
$var wire 32 :" in1 [31:0] $end
$var wire 32 ;" in2 [31:0] $end
$var wire 32 <" out [31:0] $end
$var wire 1 N flag $end
$upscope $end
$scope module mux_mem $end
$var wire 32 =" out [31:0] $end
$var wire 32 >" in2 [31:0] $end
$var wire 32 ?" in1 [31:0] $end
$var wire 1 H flag $end
$upscope $end
$scope module mux_reg $end
$var wire 5 @" out [4:0] $end
$var wire 5 A" in2 [4:0] $end
$var wire 5 B" in1 [4:0] $end
$var wire 1 6 flag $end
$upscope $end
$scope module pc $end
$var wire 1 ; PCWrite $end
$var wire 1 ! clk $end
$var wire 32 C" in [31:0] $end
$var wire 32 D" out [31:0] $end
$var reg 32 E" pc [31:0] $end
$upscope $end
$scope module pc_adder $end
$var wire 32 F" in1 [31:0] $end
$var wire 32 G" in2 [31:0] $end
$var wire 32 H" out [31:0] $end
$upscope $end
$scope module reg_fd_1 $end
$var wire 1 W IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 I" in [31:0] $end
$var reg 32 J" out [31:0] $end
$upscope $end
$scope module reg_fd_2 $end
$var wire 1 W IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 K" in [31:0] $end
$var reg 32 L" out [31:0] $end
$upscope $end
$scope module reg_ix_aluOp $end
$var wire 1 M" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 2 N" in [1:0] $end
$var reg 2 O" out [1:0] $end
$upscope $end
$scope module reg_ix_aluSrc $end
$var wire 1 P" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 ` in $end
$var reg 1 h out $end
$upscope $end
$scope module reg_ix_branch $end
$var wire 1 Q" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 _ in $end
$var reg 1 d out $end
$upscope $end
$scope module reg_ix_imm $end
$var wire 1 R" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 S" in [31:0] $end
$var reg 32 T" out [31:0] $end
$upscope $end
$scope module reg_ix_jump $end
$var wire 1 U" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 ^ in $end
$var reg 1 O out $end
$upscope $end
$scope module reg_ix_memRead $end
$var wire 1 V" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 ] in $end
$var reg 1 L out $end
$upscope $end
$scope module reg_ix_memToReg $end
$var wire 1 W" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 [ in $end
$var reg 1 I out $end
$upscope $end
$scope module reg_ix_memWrite $end
$var wire 1 X" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 \ in $end
$var reg 1 E out $end
$upscope $end
$scope module reg_ix_pc $end
$var wire 1 Y" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 Z" in [31:0] $end
$var reg 32 [" out [31:0] $end
$upscope $end
$scope module reg_ix_rd $end
$var wire 1 \" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 5 ]" in [4:0] $end
$var reg 5 ^" out [4:0] $end
$upscope $end
$scope module reg_ix_readData1 $end
$var wire 1 _" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 `" in [31:0] $end
$var reg 32 a" out [31:0] $end
$upscope $end
$scope module reg_ix_readData2 $end
$var wire 1 b" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 c" in [31:0] $end
$var reg 32 d" out [31:0] $end
$upscope $end
$scope module reg_ix_regDst $end
$var wire 1 e" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 Z in $end
$var reg 1 6 out $end
$upscope $end
$scope module reg_ix_regWrite $end
$var wire 1 f" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 Y in $end
$var reg 1 4 out $end
$upscope $end
$scope module reg_ix_rs $end
$var wire 1 g" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 5 h" in [4:0] $end
$var reg 5 i" out [4:0] $end
$upscope $end
$scope module reg_ix_rt $end
$var wire 1 j" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 5 k" in [4:0] $end
$var reg 5 l" out [4:0] $end
$upscope $end
$scope module reg_mw_alu $end
$var wire 1 m" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 n" in [31:0] $end
$var reg 32 o" out [31:0] $end
$upscope $end
$scope module reg_mw_memToReg $end
$var wire 1 p" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 G in $end
$var reg 1 H out $end
$upscope $end
$scope module reg_mw_readData $end
$var wire 1 q" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 r" in [31:0] $end
$var reg 32 s" out [31:0] $end
$upscope $end
$scope module reg_mw_regWrite $end
$var wire 1 t" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 2 in $end
$var reg 1 3 out $end
$upscope $end
$scope module reg_mw_writeReg $end
$var wire 1 u" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 5 v" in [4:0] $end
$var reg 5 w" out [4:0] $end
$upscope $end
$scope module reg_xm_alu $end
$var wire 1 x" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 y" in [31:0] $end
$var reg 32 z" out [31:0] $end
$upscope $end
$scope module reg_xm_branch $end
$var wire 1 {" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 d in $end
$var reg 1 c out $end
$upscope $end
$scope module reg_xm_branchAddr $end
$var wire 1 |" IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 }" in [31:0] $end
$var reg 32 ~" out [31:0] $end
$upscope $end
$scope module reg_xm_jump $end
$var wire 1 !# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 O in $end
$var reg 1 N out $end
$upscope $end
$scope module reg_xm_memRead $end
$var wire 1 "# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 L in $end
$var reg 1 K out $end
$upscope $end
$scope module reg_xm_memToReg $end
$var wire 1 ## IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 I in $end
$var reg 1 G out $end
$upscope $end
$scope module reg_xm_memWrite $end
$var wire 1 $# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 E in $end
$var reg 1 D out $end
$upscope $end
$scope module reg_xm_readData2 $end
$var wire 1 %# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 32 &# in [31:0] $end
$var reg 32 '# out [31:0] $end
$upscope $end
$scope module reg_xm_regWrite $end
$var wire 1 (# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 4 in $end
$var reg 1 2 out $end
$upscope $end
$scope module reg_xm_writeReg $end
$var wire 1 )# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 5 *# in [4:0] $end
$var reg 5 +# out [4:0] $end
$upscope $end
$scope module reg_xm_zero $end
$var wire 1 ,# IF_ID_write $end
$var wire 1 ! clk $end
$var wire 1 # in $end
$var reg 1 " out $end
$upscope $end
$scope module regfile $end
$var wire 1 ! clk $end
$var wire 5 -# rd_address [4:0] $end
$var wire 32 .# rd_value [31:0] $end
$var wire 1 3 reg_write $end
$var wire 5 /# rs_address [4:0] $end
$var wire 32 0# rs_value [31:0] $end
$var wire 5 1# rt_address [4:0] $end
$var wire 32 2# rt_value [31:0] $end
$upscope $end
$scope module shift_branch $end
$var wire 32 3# in [31:0] $end
$var wire 32 4# out [31:0] $end
$upscope $end
$scope module shift_jump $end
$var wire 26 5# in [25:0] $end
$var wire 28 6# out [27:0] $end
$upscope $end
$scope module signextend $end
$var wire 16 7# in [15:0] $end
$var wire 32 8# out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 8#
b0 7#
b0 6#
b0 5#
b0 4#
b0 3#
b0 2#
b0 1#
b0 0#
b0 /#
b0 .#
b0 -#
1,#
b0 +#
b0 *#
1)#
1(#
b0 '#
b0 &#
1%#
1$#
1##
1"#
1!#
b0 ~"
b0 }"
1|"
1{"
b0 z"
b0 y"
1x"
b0 w"
b0 v"
1u"
1t"
b0 s"
bx r"
1q"
1p"
b0 o"
b0 n"
1m"
b0 l"
b0 k"
1j"
b0 i"
b0 h"
1g"
1f"
1e"
b0 d"
b0 c"
1b"
b0 a"
b0 `"
1_"
b0 ^"
b0 ]"
1\"
b0 ["
b0 Z"
1Y"
1X"
1W"
1V"
1U"
b0 T"
b0 S"
1R"
1Q"
1P"
b0 O"
b10 N"
1M"
b0 L"
b100000000010000000000000001010 K"
b0 J"
b100 I"
b100 H"
b100 G"
b0 F"
b0 E"
b0 D"
b100 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
b100 <"
b0 ;"
b100 :"
b100 9"
b0 8"
b100 7"
b0 6"
b0 5"
b0 4"
b100000000 3"
b0 2"
b100000000010000000000000001010 1"
00"
0/"
0."
0-"
0,"
0+"
0*"
0)"
b10 ("
b0 '"
b10 &"
b0 %"
bx $"
b0 #"
b10 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
bz p
b0 o
b0 n
b0 m
b10 l
b0 k
b0 j
0i
0h
0g
b0 f
b0 e
0d
0c
0b
b10 a
0`
0_
0^
0]
0\
0[
1Z
1Y
0X
1W
b0 V
b0 U
b100000000010000000000000001010 T
b0 S
0R
b0 Q
b0 P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
b100 C
b0 B
b100 A
b100 @
b0 ?
b0 >
b0 =
0<
1;
b0 :
bx 9
b0 8
17
06
15
04
03
02
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
b0 &
b0 %
b0 $
1#
0"
0!
$end
#5
b11 a
b11 ("
b11 N"
1`
0Z
b11 l
b11 ""
b11 &"
1i
07
b1000 A
b1000 <"
b1000 C"
b1000000000000000101000 P
b1000000000000000101000 ;"
b1000000000000000101000 Q
b1000000000000000101000 6#
b1000 C
b1000 7"
b1000 :"
b100000000010010000000000001000 T
b100000000010010000000000001000 1"
b100000000010010000000000001000 K"
b1000 k"
b1010 V
b1010 S"
b1010 8#
b1010 7#
bx +
bx c"
bx 2#
b1000 1#
b1000 !"
b10000000000000001010 5#
b1000 o
b1000 @
b1000 9"
b1000 H"
b1000 I"
b100 =
b100 2"
b100 D"
b100 E"
b100 F"
b100 ?
b100 J"
b100 Z"
b100000000010000000000000001010 S
b100000000010000000000000001010 L"
16
b10 k
b10 z
b10 O"
14
1"
bx 8
bx >"
bx s"
1!
#10
0!
#15
0#
b1010 j
b1010 x
b1010 y"
b1001000000000000100000 P
b1001000000000000100000 ;"
b1001000000000000100000 Q
b1001000000000000100000 6#
b1100 A
b1100 <"
b1100 C"
b101000 (
b101000 }
b101000 4#
b1010 y
b1010 m
b1010 v
b1010 4"
b1000 &
b1000 @"
b1000 *#
b1001 k"
b1000 V
b1000 S"
b1000 8#
b1000 7#
b1001 1#
b10010000000000001000 5#
b1001 o
b1100 C
b1100 7"
b1100 :"
b1000010010101000000100101 T
b1000010010101000000100101 1"
b1000010010101000000100101 K"
12
b1000 ,
b1000 r
b1000 B"
b1000 l"
b1010 U
b1010 5"
b1010 T"
b1010 3#
bx *
bx 6"
bx d"
bx &#
b101100 f
b101100 |
b101100 }"
b100 >
b100 ~
b100 ["
1h
b11 k
b11 z
b11 O"
06
b100000000010010000000000001000 S
b100000000010010000000000001000 L"
b1000 ?
b1000 J"
b1000 Z"
b1100 @
b1100 9"
b1100 H"
b1100 I"
b1000 =
b1000 2"
b1000 D"
b1000 E"
b1000 F"
1!
#20
0!
#25
b0 a
b0 ("
b0 N"
0`
0Y
b10 l
b10 ""
b10 &"
0i
17
b1000 j
b1000 x
b1000 y"
1b
1X
0W
0;
b10000 A
b10000 <"
b10000 C"
b100001001010100000010010100 P
b100001001010100000010010100 ;"
b100001001010100000010010100 Q
b100001001010100000010010100 6#
b10000 C
b10000 7"
b10000 :"
b100000000010010000000000000001 T
b100000000010010000000000000001 1"
b100000000010010000000000000001 K"
b1010 ]"
b1000 h"
b101000000100101 V
b101000000100101 S"
b101000000100101 8#
b101000000100101 7#
bx .
bx `"
bx 0#
b1000 /#
b0 !"
b1000010010101000000100101 5#
b1000 n
b100000 (
b100000 }
b100000 4#
b1000 m
b1000 v
b1000 4"
b1000 y
b1001 &
b1001 @"
b1001 *#
b10000 @
b10000 9"
b10000 H"
b10000 I"
b1100 =
b1100 2"
b1100 D"
b1100 E"
b1100 F"
b1100 ?
b1100 J"
b1100 Z"
b1000010010101000000100101 S
b1000010010101000000100101 L"
b101000 f
b101000 |
b101000 }"
b1000 >
b1000 ~
b1000 ["
b1000 U
b1000 5"
b1000 T"
b1000 3#
b1001 ,
b1001 r
b1001 B"
b1001 l"
b101100 e
b101100 8"
b101100 ~"
0"
b1010 0
b1010 %"
b1010 n"
b1010 z"
bx )
bx #"
bx '#
b1000 $
b1000 t
b1000 v"
b1000 +#
13
1!
#30
0!
#35
x#
bx j
bx x
bx y"
b1010 '
b1010 ="
b1010 .#
b10100000010010100 (
b10100000010010100 }
b10100000010010100 4#
b100101 y
bx m
bx v
bx 4"
b1000 %
b1000 q
b1000 w"
b1000 -#
b1010 1
b1010 ?"
b1010 o"
b1001 $
b1001 t
b1001 v"
b1001 +#
b1000 0
b1000 %"
b1000 n"
b1000 z"
b101000 e
b101000 8"
b101000 ~"
b1010 :
b1010 s
b1010 A"
b1010 ^"
b1000 /
b1000 i"
b101000000100101 U
b101000000100101 5"
b101000000100101 T"
b101000000100101 3#
bx -
bx w
bx a"
b10100000010100000 f
b10100000010100000 |
b10100000010100000 }"
b1100 >
b1100 ~
b1100 ["
04
0h
b0 k
b0 z
b0 O"
1!
#40
0!
#45
b1000 '
b1000 ="
b1000 .#
b1010 .
b1010 `"
b1010 0#
02
b10100000010100000 e
b10100000010100000 8"
b10100000010100000 ~"
x"
bx 0
bx %"
bx n"
bx z"
b1000 1
b1000 ?"
b1000 o"
b1001 %
b1001 q
b1001 w"
b1001 -#
1!
#50
0!
#55
b10 a
b10 ("
b10 N"
1Z
1Y
0b
0X
1W
1;
bx '
bx ="
bx .#
bx 1
bx ?"
bx o"
03
b1010 -
b1010 w
b1010 a"
b1000 +
b1000 c"
b1000 2#
1!
#60
0!
#65
b11 a
b11 ("
b11 N"
1`
0Z
b11 l
b11 ""
b11 &"
1i
07
0#
b1010 j
b1010 x
b1010 y"
b101 B
b101 u
b101 {
b10100 A
b10100 <"
b10100 C"
b1001000000000000000100 P
b1001000000000000000100 ;"
b1001000000000000000100 Q
b1001000000000000000100 6#
b10100 C
b10100 7"
b10100 :"
b1000010000100000000100000 T
b1000010000100000000100000 1"
b1000010000100000000100000 K"
b0 ]"
b0 h"
b1 V
b1 S"
b1 8#
b1 7#
b0 .
b0 `"
b0 0#
b0 /#
b1000 !"
b10010000000000000001 5#
b0 n
b1010 &
b1010 @"
b1010 *#
b1000 m
b1000 v
b1000 4"
b10100 @
b10100 9"
b10100 H"
b10100 I"
b10000 =
b10000 2"
b10000 D"
b10000 E"
b10000 F"
b10000 ?
b10000 J"
b10000 Z"
b100000000010010000000000000001 S
b100000000010010000000000000001 L"
16
b10 k
b10 z
b10 O"
14
b1000 *
b1000 6"
b1000 d"
b1000 &#
1!
#70
0!
#75
b10 a
b10 ("
b10 N"
0`
1Z
b10 l
b10 ""
b10 &"
0i
17
b1 j
b1 x
b1 y"
b0 B
b0 u
b0 {
b100001000010000000010000000 P
b100001000010000000010000000 ;"
b100001000010000000010000000 Q
b100001000010000000010000000 6#
b11000 A
b11000 <"
b11000 C"
b100 (
b100 }
b100 4#
b1 y
b1 m
b1 v
b1 4"
b1001 &
b1001 @"
b1001 *#
b1000 ]"
b1000 k"
b1000 h"
b100000000100000 V
b100000000100000 S"
b100000000100000 8#
b100000000100000 7#
b1010 +
b1010 c"
b1010 2#
b1000 1#
b1010 .
b1010 `"
b1010 0#
b1000 /#
b0 !"
b1000010000100000000100000 5#
b1000 o
b1000 n
b11000 C
b11000 7"
b11000 :"
b1000010100101100000100101 T
b1000010100101100000100101 1"
b1000010100101100000100101 K"
b1010 $
b1010 t
b1010 v"
b1010 +#
b1000 )
b1000 #"
b1000 '#
b1010 0
b1010 %"
b1010 n"
b1010 z"
0"
12
b0 :
b0 s
b0 A"
b0 ^"
b0 /
b0 i"
b1 U
b1 5"
b1 T"
b1 3#
b0 -
b0 w
b0 a"
b10100 f
b10100 |
b10100 }"
b10000 >
b10000 ~
b10000 ["
1h
b11 k
b11 z
b11 O"
06
b1000010000100000000100000 S
b1000010000100000000100000 L"
b10100 ?
b10100 J"
b10100 Z"
b11000 @
b11000 9"
b11000 H"
b11000 I"
b10100 =
b10100 2"
b10100 D"
b10100 E"
b10100 F"
1!
#80
0!
#85
b0 a
b0 ("
b0 N"
0Z
0Y
b10100 j
b10100 x
b10100 y"
1b
1X
0W
0;
b11100 A
b11100 <"
b11100 C"
b100001010010110000010010100 P
b100001010010110000010010100 ;"
b100001010010110000010010100 Q
b100001010010110000010010100 6#
b11100 C
b11100 7"
b11100 :"
b0 T
b0 1"
b0 K"
b1011 ]"
b1010 k"
b101100000100101 V
b101100000100101 S"
b101100000100101 8#
b101100000100101 7#
bx +
bx c"
bx 2#
b1010 1#
b1000010100101100000100101 5#
b1010 o
b10000000010000000 (
b10000000010000000 }
b10000000010000000 4#
b1010 m
b1010 v
b1010 4"
b100000 y
b1000 &
b1000 @"
b1000 *#
b1010 '
b1010 ="
b1010 .#
b11100 @
b11100 9"
b11100 H"
b11100 I"
b11000 =
b11000 2"
b11000 D"
b11000 E"
b11000 F"
b11000 ?
b11000 J"
b11000 Z"
b1000010100101100000100101 S
b1000010100101100000100101 L"
16
b10 k
b10 z
b10 O"
0h
b10000000010010100 f
b10000000010010100 |
b10000000010010100 }"
b10100 >
b10100 ~
b10100 ["
b1010 -
b1010 w
b1010 a"
b1010 *
b1010 6"
b1010 d"
b1010 &#
b100000000100000 U
b100000000100000 5"
b100000000100000 T"
b100000000100000 3#
b1000 /
b1000 i"
b1000 ,
b1000 r
b1000 B"
b1000 l"
b1000 :
b1000 s
b1000 A"
b1000 ^"
b10100 e
b10100 8"
b10100 ~"
b1 0
b1 %"
b1 n"
b1 z"
b1001 $
b1001 t
b1001 v"
b1001 +#
13
b1010 1
b1010 ?"
b1010 o"
b1010 %
b1010 q
b1010 w"
b1010 -#
1!
#90
0!
#95
x#
bx j
bx x
bx y"
b1 '
b1 ="
b1 .#
b10110000010010100 (
b10110000010010100 }
b10110000010010100 4#
b100101 y
bx m
bx v
bx 4"
b1010 &
b1010 @"
b1010 *#
b1001 %
b1001 q
b1001 w"
b1001 -#
b1 1
b1 ?"
b1 o"
b1000 $
b1000 t
b1000 v"
b1000 +#
b1010 )
b1010 #"
b1010 '#
b10100 0
b10100 %"
b10100 n"
b10100 z"
b10000000010010100 e
b10000000010010100 8"
b10000000010010100 ~"
b1011 :
b1011 s
b1011 A"
b1011 ^"
b1010 ,
b1010 r
b1010 B"
b1010 l"
b101100000100101 U
b101100000100101 5"
b101100000100101 T"
b101100000100101 3#
bx *
bx 6"
bx d"
bx &#
b10110000010101100 f
b10110000010101100 |
b10110000010101100 }"
b11000 >
b11000 ~
b11000 ["
04
b0 k
b0 z
b0 O"
06
b1010 +
b1010 c"
b1010 2#
1!
#100
0!
#105
0#
b10100 j
b10100 x
b10100 y"
b1010 m
b1010 v
b1010 4"
b10100 '
b10100 ="
b10100 .#
b1010 *
b1010 6"
b1010 d"
b1010 &#
02
b10110000010101100 e
b10110000010101100 8"
b10110000010101100 ~"
x"
bx 0
bx %"
bx n"
bx z"
bx )
bx #"
bx '#
b1010 $
b1010 t
b1010 v"
b1010 +#
b10100 1
b10100 ?"
b10100 o"
b1000 %
b1000 q
b1000 w"
b1000 -#
1!
#110
0!
#115
b10 a
b10 ("
b10 N"
1Z
1Y
0b
0X
1W
1;
bx '
bx ="
bx .#
b1010 %
b1010 q
b1010 w"
b1010 -#
bx 1
bx ?"
bx o"
03
b1010 )
b1010 #"
b1010 '#
b10100 0
b10100 %"
b10100 n"
b10100 z"
0"
b10100 .
b10100 `"
b10100 0#
1!
#120
0!
#125
b101 B
b101 u
b101 {
b11110 j
b11110 x
b11110 y"
b100000 A
b100000 <"
b100000 C"
b0 P
b0 ;"
b0 Q
b0 6#
b100000 C
b100000 7"
b100000 :"
b0 ]"
b0 k"
b0 h"
b0 V
b0 S"
b0 8#
b0 7#
b0 +
b0 c"
b0 2#
b0 1#
b0 .
b0 `"
b0 0#
b0 /#
b0 5#
b0 o
b0 n
b1011 &
b1011 @"
b1011 *#
b10100 '
b10100 ="
b10100 .#
b100000 @
b100000 9"
b100000 H"
b100000 I"
b11100 =
b11100 2"
b11100 D"
b11100 E"
b11100 F"
b11100 ?
b11100 J"
b11100 Z"
b0 S
b0 L"
16
b10 k
b10 z
b10 O"
14
b10100 -
b10100 w
b10100 a"
b10100 1
b10100 ?"
b10100 o"
1!
#130
0!
#135
b0 B
b0 u
b0 {
1#
b0 j
b0 x
b0 y"
b100100 A
b100100 <"
b100100 C"
b0 &
b0 @"
b0 *#
b0 (
b0 }
b0 4#
b0 y
b0 m
b0 v
b0 4"
b100100 C
b100100 7"
b100100 :"
b1011 $
b1011 t
b1011 v"
b1011 +#
b11110 0
b11110 %"
b11110 n"
b11110 z"
12
b0 :
b0 s
b0 A"
b0 ^"
b0 ,
b0 r
b0 B"
b0 l"
b0 /
b0 i"
b0 U
b0 5"
b0 T"
b0 3#
b0 *
b0 6"
b0 d"
b0 &#
b0 -
b0 w
b0 a"
b11100 f
b11100 |
b11100 }"
b11100 >
b11100 ~
b11100 ["
b100000 ?
b100000 J"
b100000 Z"
b100100 @
b100100 9"
b100100 H"
b100100 I"
b100000 =
b100000 2"
b100000 D"
b100000 E"
b100000 F"
1!
#140
0!
#145
b101000 A
b101000 <"
b101000 C"
b101000 C
b101000 7"
b101000 :"
b11110 '
b11110 ="
b11110 .#
b101000 @
b101000 9"
b101000 H"
b101000 I"
b100100 =
b100100 2"
b100100 D"
b100100 E"
b100100 F"
b100100 ?
b100100 J"
b100100 Z"
b100000 f
b100000 |
b100000 }"
b100000 >
b100000 ~
b100000 ["
b11100 e
b11100 8"
b11100 ~"
1"
b0 0
b0 %"
b0 n"
b0 z"
b0 )
b0 #"
b0 '#
b0 $
b0 t
b0 v"
b0 +#
13
b11110 1
b11110 ?"
b11110 o"
b1011 %
b1011 q
b1011 w"
b1011 -#
1!
#150
0!
#155
b101100 A
b101100 <"
b101100 C"
b0 '
b0 ="
b0 .#
b101100 C
b101100 7"
b101100 :"
b0 %
b0 q
b0 w"
b0 -#
b0 1
b0 ?"
b0 o"
b100000 e
b100000 8"
b100000 ~"
b100100 f
b100100 |
b100100 }"
b100100 >
b100100 ~
b100100 ["
b101000 ?
b101000 J"
b101000 Z"
b101100 @
b101100 9"
b101100 H"
b101100 I"
b101000 =
b101000 2"
b101000 D"
b101000 E"
b101000 F"
1!
#160
0!
#165
b110000 A
b110000 <"
b110000 C"
b110000 C
b110000 7"
b110000 :"
b110000 @
b110000 9"
b110000 H"
b110000 I"
b101100 =
b101100 2"
b101100 D"
b101100 E"
b101100 F"
b101100 ?
b101100 J"
b101100 Z"
b101000 f
b101000 |
b101000 }"
b101000 >
b101000 ~
b101000 ["
b100100 e
b100100 8"
b100100 ~"
1!
#170
0!
